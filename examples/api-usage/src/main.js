import './style.css'
import { BlockBuilder } from '@mushket-co/block-builder/core'

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
const blockConfigs = {
  text: {
    title: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
    icon: 'üìù',
    description: '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
    render: {
      kind: 'html',
      template: (props) => `
        <div class="text-block" style="padding: 1rem; background: white; border-radius: 4px; margin-bottom: 1rem;">
          <p style="font-size: ${props.fontSize || 16}px; color: ${props.color || '#333'};">
            ${props.content || '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç'}
          </p>
        </div>
      `
    },
    fields: [
      {
        field: 'content',
        label: '–¢–µ–∫—Å—Ç',
        type: 'textarea',
        defaultValue: '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫'
      },
      {
        field: 'fontSize',
        label: '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞',
        type: 'number',
        defaultValue: 16
      },
      {
        field: 'color',
        label: '–¶–≤–µ—Ç',
        type: 'color',
        defaultValue: '#333333'
      }
    ]
  },
  image: {
    title: '–ë–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    icon: 'üñºÔ∏è',
    description: '–ü—Ä–æ—Å—Ç–æ–π –±–ª–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
    render: {
      kind: 'html',
      template: (props) => `
        <div class="image-block" style="padding: 1rem; background: white; border-radius: 4px; margin-bottom: 1rem; text-align: center;">
          <img src="${props.src || '/1.jpeg'}"
               alt="${props.alt || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}"
               style="max-width: 100%; border-radius: 4px;" />
        </div>
      `
    },
    fields: [
      {
        field: 'src',
        label: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        type: 'text',
        defaultValue: '/1.jpeg'
      },
      {
        field: 'alt',
        label: '–û–ø–∏—Å–∞–Ω–∏–µ',
        type: 'text',
        defaultValue: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      }
    ]
  },
  card: {
    title: '–ö–∞—Ä—Ç–æ—á–∫–∞',
    icon: 'üÉè',
    description: '–ë–ª–æ–∫-–∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º',
    render: {
      kind: 'html',
      template: (props) => `
        <div class="card-block" style="padding: 2rem; background: ${props.bgColor || 'white'}; border: 2px solid ${props.borderColor || '#ddd'}; border-radius: 8px; margin-bottom: 1rem;">
          <h3 style="margin-top: 0; color: ${props.titleColor || '#333'};">
            ${props.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏'}
          </h3>
          <p style="color: ${props.textColor || '#666'};">
            ${props.description || '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏'}
          </p>
        </div>
      `
    },
    fields: [
      {
        field: 'title',
        label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        type: 'text',
        defaultValue: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏'
      },
      {
        field: 'description',
        label: '–û–ø–∏—Å–∞–Ω–∏–µ',
        type: 'textarea',
        defaultValue: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏'
      },
      {
        field: 'bgColor',
        label: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞',
        type: 'color',
        defaultValue: '#ffffff'
      },
      {
        field: 'borderColor',
        label: '–¶–≤–µ—Ç —Ä–∞–º–∫–∏',
        type: 'color',
        defaultValue: '#dddddd'
      },
      {
        field: 'titleColor',
        label: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞',
        type: 'color',
        defaultValue: '#333333'
      },
      {
        field: 'textColor',
        label: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞',
        type: 'color',
        defaultValue: '#666666'
      }
    ]
  },
  hero: {
    title: 'Hero —Å–µ–∫—Ü–∏—è',
    icon: 'üéØ',
    description: '–ì–ª–∞–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º',
    render: {
      kind: 'html',
      template: (props) => `
        <div class="hero-block" style="position: relative; height: 400px; background: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url(${props.bgImage || '/1.jpeg'}); background-size: cover; display: flex; align-items: center; justify-content: center; color: white; margin-bottom: 1rem;">
          <div style="text-align: center; padding: 2rem;">
            <h1 style="font-size: ${props.titleSize || 48}px; margin: 0 0 1rem 0;">
              ${props.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ Hero'}
            </h1>
            <p style="font-size: ${props.subtitleSize || 20}px; margin: 0;">
              ${props.subtitle || '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ Hero'}
            </p>
          </div>
        </div>
      `
    },
    fields: [
      {
        field: 'title',
        label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        type: 'text',
        defaultValue: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ Hero'
      },
      {
        field: 'subtitle',
        label: '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
        type: 'text',
        defaultValue: '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ Hero'
      },
      {
        field: 'bgImage',
        label: '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        type: 'text',
        defaultValue: '/1.jpeg'
      },
      {
        field: 'titleSize',
        label: '–†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞',
        type: 'number',
        defaultValue: 48
      },
      {
        field: 'subtitleSize',
        label: '–†–∞–∑–º–µ—Ä –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞',
        type: 'number',
        defaultValue: 20
      }
    ]
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏–∑ localStorage
const loadSavedBlocks = () => {
  try {
    const savedData = localStorage.getItem('saved-blocks')
    if (savedData) {
      const blocks = JSON.parse(savedData)
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${blocks.length} —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤`)
      return blocks
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤:', error)
  }
  return []
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BlockBuilder –ë–ï–ó –≥–æ—Ç–æ–≤–æ–≥–æ UI
const blockBuilder = new BlockBuilder({
  // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º containerId - UI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
  blockConfigs: blockConfigs,
  autoInit: false // –†—É—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
})

console.log('‚úÖ BlockBuilder API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π API, –±–µ–∑ –≥–æ—Ç–æ–≤–æ–≥–æ UI')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
const initialBlocks = loadSavedBlocks()
for (const block of initialBlocks) {
  await blockBuilder.createBlock(block)
}

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
  addTextBtn: document.getElementById('addTextBlock'),
  addImageBtn: document.getElementById('addImageBlock'),
  addCardBtn: document.getElementById('addCardBlock'),
  addHeroBtn: document.getElementById('addHeroBlock'),

  // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∞–º–∏
  getAllBlocksBtn: document.getElementById('getAllBlocks'),
  getBlocksCountBtn: document.getElementById('getBlocksCount'),
  getBlocksByTypeBtn: document.getElementById('getBlocksByType'),
  clearBlocksBtn: document.getElementById('clearBlocks'),

  // –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
  exportBtn: document.getElementById('exportBlocks'),
  importBtn: document.getElementById('importBlocks'),
  downloadBtn: document.getElementById('downloadBlocks'),
  uploadBtn: document.getElementById('uploadBtn'),
  uploadInput: document.getElementById('uploadInput'),

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å
  toggleLockBtn: document.getElementById('toggleBlockLock'),
  toggleVisibilityBtn: document.getElementById('toggleBlockVisibility'),

  // –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
  reorderBtn: document.getElementById('reorderBlocks'),

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  registerComponentBtn: document.getElementById('registerComponent'),
  getAllComponentsBtn: document.getElementById('getAllComponents'),

  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
  registerCustomFieldBtn: document.getElementById('registerCustomField'),
  getAllCustomFieldsBtn: document.getElementById('getAllCustomFields'),

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  getBlockConfigsBtn: document.getElementById('getBlockConfigs'),
  getAvailableBlockTypesBtn: document.getElementById('getAvailableBlockTypes'),

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  blocksJsonEl: document.getElementById('blocksJson'),
  blocksContainerEl: document.getElementById('blocksContainer'),
  infoPanel: document.getElementById('infoPanel')
}

// –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
let blockCounter = 0

// –°–æ–∑–¥–∞–Ω–∏–µ ID –±–ª–æ–∫–∞
function generateBlockId() {
  blockCounter++
  return `block-${Date.now()}-${blockCounter}`
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function logInfo(message, data = null) {
  const infoEl = elements.infoPanel
  const timestamp = new Date().toLocaleTimeString()
  const logEntry = document.createElement('div')
  logEntry.className = 'log-entry'
  logEntry.innerHTML = `<span class="timestamp">[${timestamp}]</span> ${message}`
  if (data) {
    logEntry.innerHTML += `<pre>${JSON.stringify(data, null, 2)}</pre>`
  }
  infoEl.insertBefore(logEntry, infoEl.firstChild)
  console.log(`[${timestamp}]`, message, data || '')
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø =====

async function updateDisplay() {
  const blocks = await blockBuilder.getAllBlocks()

  elements.blocksJsonEl.textContent = JSON.stringify(blocks, null, 2)

  elements.blocksContainerEl.innerHTML = blocks.length === 0
    ? '<p style="color: #999; text-align: center; padding: 2rem;">–ë–ª–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>'
    : ''

  blocks.forEach((block, index) => {
    const blockEl = document.createElement('div')
    blockEl.className = 'block-item'
    blockEl.innerHTML = `
      <div class="block-header">
        <div class="block-info">
          <strong>#${index + 1} - ${block.type}</strong>
          <small>ID: ${block.id}</small>
        </div>
        <div class="block-meta">
          <span class="meta-item ${block.locked ? 'locked' : ''}" title="${block.locked ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}">üîí</span>
          <span class="meta-item ${!block.visible ? 'hidden' : ''}" title="${block.visible ? '–í–∏–¥–∏–º—ã–π' : '–°–∫—Ä—ã—Ç—ã–π'}">üëÅÔ∏è</span>
        </div>
      </div>
      <div class="block-actions">
        <button class="btn btn-secondary btn-sm" onclick="editBlock('${block.id}')">–ò–∑–º–µ–Ω–∏—Ç—å</button>
        <button class="btn btn-secondary btn-sm" onclick="duplicateBlock('${block.id}')">–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å</button>
        <button class="btn btn-warning btn-sm" onclick="toggleBlockLockAPI('${block.id}')">${block.locked ? 'üîì –†–∞–∑–±–ª–æ–∫.' : 'üîí –ó–∞–±–ª–æ–∫.'}</button>
        <button class="btn btn-warning btn-sm" onclick="toggleBlockVisibilityAPI('${block.id}')">${!block.visible ? 'üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å' : 'üôà –°–∫—Ä—ã—Ç—å'}</button>
        <button class="btn btn-danger btn-sm" onclick="deleteBlock('${block.id}')">–£–¥–∞–ª–∏—Ç—å</button>
      </div>
      <div class="block-preview">
        <small>Props: ${JSON.stringify(block.props).substring(0, 120)}...</small>
      </div>
    `
    elements.blocksContainerEl.appendChild(blockEl)
  })
}

// ===== –°–û–ó–î–ê–ù–ò–ï –ë–õ–û–ö–û–í =====

elements.addTextBtn.addEventListener('click', async () => {
  const id = generateBlockId()
  const newBlock = await blockBuilder.createBlock({
    type: 'text',
    settings: {},
    props: {
      content: `–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ #${blockCounter}`,
      fontSize: 16 + Math.floor(Math.random() * 16),
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`
    }
  })

  logInfo('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫', newBlock)
  await updateDisplay()
})

elements.addImageBtn.addEventListener('click', async () => {
  const id = generateBlockId()
  const images = ['/1.jpeg', '/2.jpg', '/3.png', '/qw.jpg', '/bear.jpg', '/Edvard_Grieg.jpg']
  const newBlock = await blockBuilder.createBlock({
    type: 'image',
    settings: {},
    props: {
      src: images[(blockCounter - 1) % images.length],
      alt: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${blockCounter}`
    }
  })

  logInfo('‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', newBlock)
  await updateDisplay()
})

elements.addCardBtn.addEventListener('click', async () => {
  const newBlock = await blockBuilder.createBlock({
    type: 'card',
    settings: {},
    props: {
      title: `–ö–∞—Ä—Ç–æ—á–∫–∞ #${blockCounter}`,
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏',
      bgColor: '#' + Math.floor(Math.random()*16777215).toString(16),
      borderColor: '#' + Math.floor(Math.random()*16777215).toString(16),
      titleColor: '#333333',
      textColor: '#666666'
    }
  })

  logInfo('‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏', newBlock)
  await updateDisplay()
})

elements.addHeroBtn.addEventListener('click', async () => {
  const newBlock = await blockBuilder.createBlock({
    type: 'hero',
    settings: {},
    props: {
      title: `Hero —Å–µ–∫—Ü–∏—è #${blockCounter}`,
      subtitle: '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
      bgImage: `/1.jpeg`,
      titleSize: 48,
      subtitleSize: 20
    }
  })

  logInfo('‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ Hero', newBlock)
  await updateDisplay()
})

// ===== –ü–û–õ–£–ß–ï–ù–ò–ï –ë–õ–û–ö–û–í =====

elements.getAllBlocksBtn.addEventListener('click', async () => {
  const blocks = await blockBuilder.getAllBlocks()
  logInfo(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤: ${blocks.length}`, blocks)
  alert(`–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: ${blocks.length}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π`)
})

elements.getBlocksCountBtn.addEventListener('click', async () => {
  const count = await blockBuilder.getBlocksCount()
  logInfo(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: ${count}`)
  alert(`–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: ${count}`)
})

elements.getBlocksByTypeBtn.addEventListener('click', async () => {
  const types = await blockBuilder.getAvailableBlockTypes()
  const selectedType = prompt(`–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞:\n${types.join(', ')}`, 'text')

  if (selectedType && await blockBuilder.hasBlockType(selectedType)) {
    const blocks = await blockBuilder.getBlocksByType(selectedType)
    logInfo(`üìã –ü–æ–ª—É—á–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Ç–∏–ø–∞ '${selectedType}': ${blocks.length}`, blocks)
    alert(`–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Ç–∏–ø–∞ "${selectedType}": ${blocks.length}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤`)
  } else {
    alert('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞')
  }
})

// ===== –ë–õ–û–ö–ò–†–û–í–ö–ê –ò –í–ò–î–ò–ú–û–°–¢–¨ =====

window.toggleBlockLockAPI = async (id) => {
  const block = await blockBuilder.getBlock(id)
  if (!block) return

  const newLocked = !block.locked
  await blockBuilder.setBlockLocked(id, newLocked)
  logInfo(`üîí –ë–ª–æ–∫ ${id} ${newLocked ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`)
  await updateDisplay()
}

window.toggleBlockVisibilityAPI = async (id) => {
  const block = await blockBuilder.getBlock(id)
  if (!block) return

  const newVisible = !block.visible
  await blockBuilder.setBlockVisible(id, newVisible)
  logInfo(`üëÅÔ∏è –ë–ª–æ–∫ ${id} ${newVisible ? '–ø–æ–∫–∞–∑–∞–Ω' : '—Å–∫—Ä—ã—Ç'}`)
  await updateDisplay()
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

window.editBlock = async (id) => {
  const block = await blockBuilder.getBlock(id)
  if (!block) {
    alert('–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return
  }

  const newContent = prompt('–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (JSON):', JSON.stringify(block.props, null, 2))
  if (newContent) {
    try {
      const newProps = JSON.parse(newContent)
      await blockBuilder.updateBlock(id, { props: newProps })
      logInfo(`‚úèÔ∏è –ë–ª–æ–∫ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω`)
      await updateDisplay()
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ' + e.message)
    }
  }
}

window.deleteBlock = async (id) => {
  if (confirm(`–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ ${id}?`)) {
    const result = await blockBuilder.deleteBlock(id)
    logInfo(`üóëÔ∏è –ë–ª–æ–∫ ${id} —É–¥–∞–ª–µ–Ω`, { success: result })
    await updateDisplay()
  }
}

window.duplicateBlock = async (id) => {
  const duplicatedBlock = await blockBuilder.duplicateBlock(id)
  if (duplicatedBlock) {
    logInfo(`üìÑ –ë–ª–æ–∫ ${id} –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω`, duplicatedBlock)
    await updateDisplay()
  }
}

// ===== –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø =====

elements.reorderBtn.addEventListener('click', async () => {
  const blocks = await blockBuilder.getAllBlocks()
  if (blocks.length === 0) {
    alert('–ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    return
  }

  const reversedIds = [...blocks].reverse().map(b => b.id)
  await blockBuilder.reorderBlocks(reversedIds)
  logInfo('üîÑ –ë–ª–æ–∫–∏ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)')
  await updateDisplay()
})

// ===== –≠–ö–°–ü–û–†–¢/–ò–ú–ü–û–†–¢ =====

elements.exportBtn.addEventListener('click', async () => {
  const json = await blockBuilder.exportBlocks()
  logInfo('üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –±–ª–æ–∫–∏', JSON.parse(json))
  alert('–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤')
})

elements.downloadBtn.addEventListener('click', async () => {
  const json = await blockBuilder.exportBlocks()
  const blob = new Blob([json], { type: 'application/json' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `blocks-${Date.now()}.json`
  a.click()
  URL.revokeObjectURL(url)
  logInfo('‚¨áÔ∏è –ë–ª–æ–∫–∏ —Å–∫–∞—á–∞–Ω—ã –∫–∞–∫ JSON —Ñ–∞–π–ª')
})

elements.uploadBtn.addEventListener('click', () => {
  elements.uploadInput.click()
})

elements.uploadInput.addEventListener('change', async (e) => {
  const file = e.target.files[0]
  if (!file) return

  const reader = new FileReader()
  reader.onload = async (event) => {
    try {
      const json = event.target.result
      const success = await blockBuilder.importBlocks(json)

      if (success) {
        logInfo('‚¨ÜÔ∏è –ë–ª–æ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞')
        await updateDisplay()
        alert('‚úÖ –ë–ª–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã')
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.')
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message)
    }
  }
  reader.readAsText(file)
  // –û—á–∏—â–∞–µ–º input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
  elements.uploadInput.value = ''
})

elements.importBtn.addEventListener('click', async () => {
  const json = prompt('–í—Å—Ç–∞–≤—å—Ç–µ JSON –±–ª–æ–∫–æ–≤:')
  if (json) {
    const success = await blockBuilder.importBlocks(json)
    if (success) {
      logInfo('‚¨ÜÔ∏è –ë–ª–æ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ JSON')
      await updateDisplay()
      alert('‚úÖ –ë–ª–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã')
    } else {
      alert('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞')
    }
  }
})

// ===== –û–ß–ò–°–¢–ö–ê =====

elements.clearBlocksBtn.addEventListener('click', async () => {
  if (confirm('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏?')) {
    await blockBuilder.clearAllBlocks()
    logInfo('üóëÔ∏è –í—Å–µ –±–ª–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã')
    await updateDisplay()
  }
})

// ===== –†–ê–ë–û–¢–ê –° –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò =====

elements.registerComponentBtn.addEventListener('click', async () => {
  const name = prompt('–ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', 'myComponent')
  if (name) {
    const myComponent = {
      name: name,
      template: '<div>–ú–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</div>',
      props: {},
      methods: {
        greet: () => alert('–ü—Ä–∏–≤–µ—Ç –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!')
      }
    }
    blockBuilder.registerComponent(name, myComponent)
    logInfo(`üìù –ö–æ–º–ø–æ–Ω–µ–Ω—Ç "${name}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`, myComponent)
  }
})

elements.getAllComponentsBtn.addEventListener('click', async () => {
  const components = blockBuilder.getAllComponents()
  logInfo('üìö –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', components)
  alert(`–í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${Object.keys(components).length}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤`)
})

// ===== –†–ê–ë–û–¢–ê –° –ö–ê–°–¢–û–ú–ù–´–ú–ò –ü–û–õ–Ø–ú–ò =====

elements.registerCustomFieldBtn.addEventListener('click', async () => {
  const id = prompt('ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è:', 'my-custom-field')
  if (id) {
    const renderer = {
      id,
      name: '–ú–æ–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ',
      render: (field, value, onChange) => {
        return document.createElement('input')
      }
    }
    blockBuilder.registerCustomFieldRenderer(renderer)
    logInfo(`üé® –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ "${id}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ`, renderer)
  }
})

elements.getAllCustomFieldsBtn.addEventListener('click', async () => {
  const fields = blockBuilder.getAllCustomFieldRenderers()
  logInfo('üé® –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è', Array.from(fields.entries()))
  alert(`–í—Å–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π: ${fields.size}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤`)
})

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====

elements.getBlockConfigsBtn.addEventListener('click', async () => {
  const configs = blockBuilder.getBlockConfigs()
  logInfo('‚öôÔ∏è –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤', configs)
  alert(`–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤: ${Object.keys(configs).length}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤`)
})

elements.getAvailableBlockTypesBtn.addEventListener('click', async () => {
  const types = blockBuilder.getAvailableBlockTypes()
  logInfo('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –±–ª–æ–∫–æ–≤', types)
  alert(`–î–æ—Å—Ç—É–ø–Ω–æ —Ç–∏–ø–æ–≤: ${types.length}\n\n${types.join(', ')}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤`)
})

// –ù–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
await updateDisplay()

// –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
setTimeout(async () => {
  const blocks = await blockBuilder.getAllBlocks()
  if (blocks.length === 0) {
    logInfo('üìù –î–æ–±–∞–≤–ª—è—é –ø—Ä–∏–º–µ—Ä—ã –±–ª–æ–∫–æ–≤...')
    elements.addTextBtn.click()
    setTimeout(() => elements.addImageBtn.click(), 100)
    setTimeout(() => elements.addCardBtn.click(), 200)
  }
}, 500)
