/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Custom Fields —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
 */

import { BlockBuilderFacade } from '../BlockBuilderFacade';
import { ICustomFieldRenderer, ICustomFieldContext } from '../core/ports/CustomFieldRenderer';

// –ú–æ–∫-—Ä–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
class TestCustomFieldRenderer implements ICustomFieldRenderer {
  id = 'test-custom-field';
  name = 'Test Custom Field';

  render(container: HTMLElement, context: ICustomFieldContext) {
  const wrapper = document.createElement('div');
  wrapper.className = 'test-custom-field-wrapper';

  const input = document.createElement('input');
  input.type = 'text';
  input.value = context.value || '';
  input.className = 'test-custom-field-input';
  input.placeholder = context.label;

  input.addEventListener('input', (e) => {
    const newValue = (e.target as HTMLInputElement).value;
    context.onChange(newValue);
  });

  wrapper.appendChild(input);

  return {
    element: wrapper,
    getValue: () => input.value,
    setValue: (value: any) => {
      input.value = value;
    },
    validate: () => {
      if (context.required && !input.value.trim()) {
        return '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      }
      if (input.value.length < 3) {
        return '–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
      }
      return null;
    },
    destroy: () => {
      wrapper.remove();
    }
  };
  }
}

describe('Custom Fields Integration', () => {
  let facade: BlockBuilderFacade;
  let testRenderer: TestCustomFieldRenderer;

  beforeEach(() => {
  // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä
  testRenderer = new TestCustomFieldRenderer();

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø–æ–ª–µ–º
  const blockConfigs = {
    testBlock: {
      title: 'Test Block',
      icon: 'üß™',
      description: 'Block with custom field',
      render: {
        kind: 'html',
        template: (props: any) => `<div>${props.customField}</div>`
      },
      fields: [
        {
          field: 'customField',
          label: 'Custom Field',
          type: 'custom',
          customFieldConfig: {
            rendererId: 'test-custom-field',
            options: { mode: 'test' }
          },
          rules: [
            { type: 'required', message: '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }
          ],
          defaultValue: ''
        }
      ]
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º facade –ë–ï–ó UI (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å SCSS –≤ JSDOM)
  facade = new BlockBuilderFacade({
    blockConfigs,
    autoInit: false // –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  });
  });

  afterEach(() => {
  // –û—á–∏—Å—Ç–∫–∞
  });

  describe('registerCustomFieldRenderer', () => {
  it('–¥–æ–ª–∂–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π renderer', () => {
    facade.registerCustomFieldRenderer(testRenderer);

    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(true);
  });

  it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π renderer', () => {
    facade.registerCustomFieldRenderer(testRenderer);

    const retrieved = facade.getCustomFieldRenderer('test-custom-field');
    expect(retrieved).toBe(testRenderer);
  });
  });

  describe('registerCustomFieldRenderers', () => {
  it('–¥–æ–ª–∂–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ renderer\'–æ–≤', () => {
    const renderer2 = {
      ...testRenderer,
      id: 'test-custom-field-2',
      name: 'Test Custom Field 2'
    };

    facade.registerCustomFieldRenderers([testRenderer, renderer2]);

    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(true);
    expect(facade.hasCustomFieldRenderer('test-custom-field-2')).toBe(true);
  });
  });

  describe('unregisterCustomFieldRenderer', () => {
  it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π renderer', () => {
    facade.registerCustomFieldRenderer(testRenderer);
    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(true);

    const result = facade.unregisterCustomFieldRenderer('test-custom-field');

    expect(result).toBe(true);
    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(false);
  });

  it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ renderer', () => {
    const result = facade.unregisterCustomFieldRenderer('non-existent');

    expect(result).toBe(false);
  });
  });

  describe('getAllCustomFieldRenderers', () => {
  it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ renderer\'—ã', () => {
    const renderer2 = {
      ...testRenderer,
      id: 'test-custom-field-2',
      name: 'Test Custom Field 2'
    };

    facade.registerCustomFieldRenderers([testRenderer, renderer2]);

    const all = facade.getAllCustomFieldRenderers();

    expect(all.size).toBe(2);
    expect(all.get('test-custom-field')).toBe(testRenderer);
    expect(all.get('test-custom-field-2')).toBe(renderer2);
  });
  });


  describe('Workflow', () => {
  it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π workflow: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ -> —É–¥–∞–ª–µ–Ω–∏–µ', () => {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º renderer
    facade.registerCustomFieldRenderer(testRenderer);
    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(true);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ renderer –¥–æ—Å—Ç—É–ø–µ–Ω
    const retrieved = facade.getCustomFieldRenderer('test-custom-field');
    expect(retrieved).toBe(testRenderer);

    // 3. –£–¥–∞–ª—è–µ–º renderer
    facade.unregisterCustomFieldRenderer('test-custom-field');
    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(false);
  });

  it('–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å renderer\'—ã –ø–æ—Å–ª–µ destroy', () => {
    facade.registerCustomFieldRenderer(testRenderer);

    // Destroy
    facade.destroy();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ renderer –≤—Å—ë –µ—â—ë –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(true);

    // Renderer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
    const retrieved = facade.getCustomFieldRenderer('test-custom-field');
    expect(retrieved).toBe(testRenderer);
  });
  });

  describe('Error handling', () => {
  it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π renderer gracefully', () => {
    // –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º renderer, –Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    // –°–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —É–ø–∞—Å—Ç—å
    expect(() => {
      facade.getCustomFieldRenderer('non-existent');
    }).not.toThrow();

    const result = facade.getCustomFieldRenderer('non-existent');
    expect(result).toBeNull();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ renderer.render()', () => {
    const errorRenderer: ICustomFieldRenderer = {
      id: 'error-renderer',
      name: 'Error Renderer',
      render: () => {
        throw new Error('Test error');
      }
    };

    facade.registerCustomFieldRenderer(errorRenderer);

    // –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    expect(() => {
      facade.hasCustomFieldRenderer('error-renderer');
    }).not.toThrow();
  });
  });

  describe('Multiple instances', () => {
  it('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ facade', () => {
    const facade2 = new BlockBuilderFacade({
      blockConfigs: {},
      autoInit: false
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º renderer —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º facade
    facade.registerCustomFieldRenderer(testRenderer);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
    expect(facade.hasCustomFieldRenderer('test-custom-field')).toBe(true);
    expect(facade2.hasCustomFieldRenderer('test-custom-field')).toBe(false);

    // Cleanup
    facade2.destroy();
  });
  });
});

